generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  bio                String?
  role               Role            @default(USER)
  verificationToken  String?
  resetPasswordToken String?
  lastLogin          DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  posts              Post[]
  comments           Comment[]
  courses            Course[]
  eventAttendees     EventAttendee[]
  chatMessages       ChatMessage[]
  notifications      Notification[]
  badges             UserBadge[]
  skills             UserSkill[]
  followers          Follow[]        @relation("Following")
  following          Follow[]        @relation("Follower")
  userSettings       UserSettings?
  likes              Like[]
  enrollments        Enrollment[]
  chatMemberships    ChatMember[]
  accounts           Account[]
  sessions           Session[]
}

model UserSettings {
  id                   String  @id @default(cuid())
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String  @unique
  emailNotifications   Boolean @default(true)
  pushNotifications    Boolean @default(true)
  twoFactorAuthEnabled Boolean @default(false)
  theme                Theme   @default(LIGHT)
  language             String  @default("en")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  Comment[]
  likes     Like[]
  tags      Tag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  createdAt DateTime @default(now())

  @@unique([userId, postId, commentId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Course {
  id           String          @id @default(cuid())
  title        String
  description  String
  instructor   User            @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId String
  startDate    DateTime?
  endDate      DateTime?
  price        Float?
  currency     String?
  maxStudents  Int?
  imageUrl     String?
  enrollments  Enrollment[]
  lessons      Lesson[]
  contents     CourseContent[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Lesson {
  id            String   @id @default(cuid())
  title         String
  content       String
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String
  orderInCourse Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CourseContent {
  id        String         @id @default(cuid())
  title     String
  type      ContentType
  content   String
  order     Int
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  parent    CourseContent? @relation("ParentChild", fields: [parentId], references: [id])
  parentId  String?
  children  CourseContent[] @relation("ParentChild")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Enrollment {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?

  @@unique([userId, courseId])
}

model Event {
  id           String          @id @default(cuid())
  title        String
  description  String
  date         DateTime
  location     String
  maxAttendees Int?
  attendees    EventAttendee[]
  category     String
  timezone     String   @default("Europe/Berlin")
  startTime    String
  endTime      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}


model EventAttendee {
  id      String         @id @default(cuid())
  event   Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  status  AttendeeStatus @default(REGISTERED)

  @@unique([eventId, userId])
}

model ChatChannel {
  id        String        @id @default(cuid())
  name      String
  isPrivate Boolean       @default(false)
  messages  ChatMessage[]
  members   ChatMember[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ChatMember {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  joinedAt  DateTime    @default(now())

  @@unique([userId, channelId])
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime    @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      NotificationType
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  image       String
  users       UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId   String
  awardedAt DateTime @default(now())

  @@unique([userId, badgeId])
}

model Skill {
  id    String      @id @default(cuid())
  name  String      @unique
  users UserSkill[]
}

model UserSkill {
  id           String @id @default(cuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  skill        Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId      String
  level        Int
  endorsements Int    @default(0)

  @@unique([userId, skillId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  INSTRUCTOR
}

enum Theme {
  LIGHT
  DARK
}

enum AttendeeStatus {
  REGISTERED
  CONFIRMED
  CANCELLED
  ATTENDED
}

enum NotificationType {
  SYSTEM
  MENTION
  COMMENT
  LIKE
  FOLLOW
  EVENT
  COURSE
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
}